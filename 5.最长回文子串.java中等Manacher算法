class Solution {
    public String longestPalindrome(String s) {
        String T = preProcess(s);
        int len =  T.length();
        int[] P = new int[len];
        int C = 0, R = 0;
        for ( int i = 1; i < len-1; i++){//从1开始，忽略字符串首的"^"
            int i_mirror = 2*C-i;
            if (R > i){
                P[i] = Math.min(R-i,P[i_mirror]);
            }else{
                P[i] =0;
            }
            
            while (T.charAt(i+1+P[i]) == T.charAt(i-1-P[i])){
                P[i]++;
            }
            
            if (i+P[i] > R){
                C = i;
                R = i + P[i];
            }
        }

        int maxlen = 0;
        int centerIndex = 0;
        for (int i = 1; i < len-1; i++){
            if (P[i] > maxlen){
                maxlen = P[i];
                centerIndex = i;
            }
        }

        int start = (centerIndex - maxlen)/2;
        return s.substring(start,start+maxlen);
    }

    public String preProcess(String s){
        int len = s.length();
        if (len==0)
            return "^$";
        String ret = "^";
        for (int i = 0; i < len; i++)
            ret += "#" + s.charAt(i);
        ret += "#$";
        return ret;
    }
}
